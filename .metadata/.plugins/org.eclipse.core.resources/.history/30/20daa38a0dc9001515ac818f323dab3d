package openeja.orm;

import java.lang.reflect.Field;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.HashMap;

import openeja.annotation.AutoGenerated;
import openeja.annotation.Column;
import openeja.annotation.Id;
import openeja.annotation.Table;
import openeja.dal.DBAdapter;
import openeja.dal.DBFactoryAdapter;

public abstract class Entity implements IEntity {

	private final DBAdapter dba;

	public Entity() {
		this.dba = DBFactoryAdapter.getDBAdapter();
	}

	@Override
	public void load() {
		Class<?> entityClass = this.getClass();
		Table tableAnnotation = (Table) entityClass.getAnnotation(Table.class);
		String tableName = tableAnnotation.name();

		Field[] fields = entityClass.getDeclaredFields();

		boolean isAnnotationId;
		boolean isAnnotationColumn;

		HashMap<String, String> loadCondition = new HashMap<String, String>();
		HashMap<String, String> values = new HashMap<String, String>();

		for (Field field : fields) {
			field.setAccessible(true);
			try {

				isAnnotationColumn = field.isAnnotationPresent(Column.class);
				isAnnotationId = field.isAnnotationPresent(Id.class);
				if (!isAnnotationColumn)
					continue;
				Column columnAnnotation = (Column) field.getAnnotation(Column.class);

				if (isAnnotationId) {
					loadCondition.put(columnAnnotation.name(), field.get(this).toString());
				}

			} catch (Throwable ex) {
				System.err.println(ex);
			}
		}

		ResultSet rs = dba.retrieve(tableName, loadCondition);

		try {
			if (rs.next()) {
				ResultSetMetaData rsmd = rs.getMetaData();
				int columnCount = rsmd.getColumnCount();
				for (int i = 1; i <= columnCount; i++) {
					values.put(rsmd.getColumnName(i), rs.getObject(i).toString());
				}

			}
		} catch (SQLException e) {
			e.printStackTrace();
		}

		for (Field field : fields) {
			try {

				Column columnAnnotation = null;
				columnAnnotation = (Column) field.getAnnotation(Column.class);
				Object value = values.get(columnAnnotation.name());

				if (columnAnnotation.type().equalsIgnoreCase("varchar")
						|| columnAnnotation.type().equalsIgnoreCase("text")) {
					field.set(this, value);
				} else if (columnAnnotation.type().equals("int")) {
					field.setInt(this, Integer.parseInt(values.get(columnAnnotation.name())));
				} else if (columnAnnotation.type().equalsIgnoreCase("double")) {
					field.setDouble(this, Double.parseDouble(values.get(columnAnnotation.name())));
				} else if (columnAnnotation.type().equalsIgnoreCase("float")) {
					field.setDouble(this, Float.parseFloat(values.get(columnAnnotation.name())));
				} else if (columnAnnotation.type().equalsIgnoreCase("datetime")
						|| columnAnnotation.type().equalsIgnoreCase("date")) {
					field.set(this, value);
				}

			} catch (Throwable ex) {
				System.err.println(ex);
			}

		}
	}

	@Override
	public void add() {

		Class<?> entityClass = this.getClass();
		Table tableAnnotation = (Table) entityClass.getAnnotation(Table.class);
		String tableName = tableAnnotation.name();
		Field[] fields = entityClass.getDeclaredFields();
		boolean isAnnotationColumn;
		boolean isAnnotationAutoGenerated;

		HashMap<String, String> newData = new HashMap<String, String>();

		for (Field field : fields) {
			field.setAccessible(true);
			try {

				isAnnotationColumn = field.isAnnotationPresent(Column.class);
				isAnnotationAutoGenerated = field.isAnnotationPresent(AutoGenerated.class);

				if (isAnnotationColumn && !isAnnotationAutoGenerated) {
					Column columnAnnotation = (Column) field.getAnnotation(Column.class);
					newData.put(columnAnnotation.name(), field.get(this).toString());
				}

			} catch (Throwable ex) {
				System.err.println(ex);
			}
		}
		dba.insert(tableName, newData);
	}

	@Override
	public void update() {
		Class<?> entityClass = this.getClass();
		Table tableAnnotation = (Table) entityClass.getAnnotation(Table.class);
		String tableName = tableAnnotation.name();

		Field[] fields = entityClass.getDeclaredFields();

		boolean isAnnotationColumn;
		boolean isAnnotationId;

		HashMap<String, String> modifiedData = new HashMap<String, String>();
		HashMap<String, String> whereModifiedCondition = new HashMap<String, String>();

		for (Field field : fields) {
			field.setAccessible(true);
			try {

				isAnnotationColumn = field.isAnnotationPresent(Column.class);
				isAnnotationId = field.isAnnotationPresent(Id.class);
				Column columnAnnotation = null;

				if (isAnnotationColumn && !isAnnotationId) {
					columnAnnotation = (Column) field.getAnnotation(Column.class);
					modifiedData.put(columnAnnotation.name(), field.get(this).toString());
				}
				if (isAnnotationId) {
					columnAnnotation = (Column) field.getAnnotation(Column.class);
					whereModifiedCondition.put(columnAnnotation.name(), field.get(this).toString());
				}

			} catch (Throwable ex) {
				System.err.println(ex);
			}
		}
		dba.update(tableName, modifiedData, whereModifiedCondition);

	}

	@Override
	public void remove() {
		Class<?> entityClass = this.getClass();
		Table tableAnnotation = (Table) entityClass.getAnnotation(Table.class);
		String tableName = tableAnnotation.name();
		Field[] fields = entityClass.getDeclaredFields()();

		boolean isAnnotationColumn;
		boolean isAnnotationId;

		HashMap<String, String> whereDeleteCondition = new HashMap<String, String>();

		for (Field field : fields) {
			field.setAccessible(true);
			try {

				isAnnotationColumn = field.isAnnotationPresent(Column.class);
				isAnnotationId = field.isAnnotationPresent(Id.class);
				Column columnAnnotation = null;

				if (isAnnotationId && isAnnotationColumn) {
					columnAnnotation = (Column) field.getAnnotation(Column.class);
					whereDeleteCondition.put(columnAnnotation.name(), field.get(this).toString());
				}

			} catch (Throwable ex) {
				System.err.println(ex);
			}
		}
		dba.delete(tableName, whereDeleteCondition);

	}

	public void print() {

	}

}
