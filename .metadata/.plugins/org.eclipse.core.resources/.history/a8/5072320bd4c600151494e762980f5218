package OpenEJA.ORM;



import java.lang.reflect.Field;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.HashMap;


import OpenEJA.Annotation.AutoGenerated;
import OpenEJA.Annotation.Column;
import OpenEJA.Annotation.Id;
import OpenEJA.Annotation.Table;
import OpenEJA.DAL.DBAdapter;
import OpenEJA.DAL.DBFactoryAdapter;

public abstract class Entity implements IEntity {
	
	private final String name;	
	private final DBAdapter dba;

	
	public Entity(String name){
		this.name = name;
		this.dba = DBFactoryAdapter.getDBAdapter();		
	}
	
	@Override
	public void load() {
	
		HashMap<String, String> loadCondition = new HashMap<String, String>();
	}
	
	@Override
	public void add(){
			
		Class<?> entityClass = this.getClass();
		Table tableAnnotation = (Table)entityClass.getAnnotation(Table.class);
		String tableName = "";
		tableName = tableAnnotation.name();		
		System.out.println("Table Name : " + tableName);
		Field[] fields = entityClass.getFields();	
		boolean isAnnotationColumn;
		boolean isAnnotationAutoGenerated;
		
		HashMap<String, String> newData = new HashMap<String, String>();
		
		for(Field field : fields){
			try {
				System.out.println(field.getName() + ":" + field.get(this).toString());
		
				isAnnotationColumn = field.isAnnotationPresent(Column.class);
				isAnnotationAutoGenerated = field.isAnnotationPresent(AutoGenerated.class);
				
				if(isAnnotationColumn && !isAnnotationAutoGenerated){
					Column columnAnnotation = (Column)field.getAnnotation(Column.class);
					newData.put(columnAnnotation.name(), field.get(this).toString());
				}				
				System.out.println("Column :" + isAnnotationColumn);
				
			} catch (Throwable ex) {
				System.err.println(ex);
			}			
		}
		dba.insert(tableName, newData);
	}
	
	@Override
	public void update(){
		Class<?> entityClass = this.getClass();
		Table tableAnnotation = (Table)entityClass.getAnnotation(Table.class);
		String tableName = "";
		tableName = tableAnnotation.name();		
		System.out.println("Table Name : " + tableName);
		Field[] fields = entityClass.getFields();
		
		boolean isAnnotationColumn;
		boolean isAnnotationId;
		
		HashMap<String, String> modifiedData = new HashMap<String, String>();
		HashMap<String, String> whereModifiedCondition = new HashMap<String, String>();
		
		for(Field field : fields){
			try {
				System.out.println(field.getName() + ":" + field.get(this).toString());
		
				isAnnotationColumn = field.isAnnotationPresent(Column.class);
				isAnnotationId = field.isAnnotationPresent(Id.class);
				Column columnAnnotation = null;
				
				if(isAnnotationColumn && !isAnnotationId){
					columnAnnotation = (Column)field.getAnnotation(Column.class);
					modifiedData.put(columnAnnotation.name(), field.get(this).toString());
				}		
				if(isAnnotationId){
					columnAnnotation = (Column)field.getAnnotation(Column.class);
					whereModifiedCondition.put(columnAnnotation.name(), field.get(this).toString());
				}
				System.out.println("Column :" + isAnnotationColumn);
				
			} catch (Throwable ex) {
				System.err.println(ex);
			}			
		}
		dba.update(tableName, modifiedData, whereModifiedCondition);
		
	}
	
	@Override
	public void remove(){
		Class<?> entityClass = this.getClass();
		Table tableAnnotation = (Table)entityClass.getAnnotation(Table.class);
		String tableName = "";
		tableName = tableAnnotation.name();		
		System.out.println("Table Name : " + tableName);
		Field[] fields = entityClass.getFields();
		
		boolean isAnnotationColumn;
		boolean isAnnotationId;		
	
		HashMap<String, String> whereDeleteCondition = new HashMap<String, String>();
		
		for(Field field : fields){
			try {
				System.out.println(field.getName() + ":" + field.get(this).toString());
		
				isAnnotationColumn = field.isAnnotationPresent(Column.class);
				isAnnotationId = field.isAnnotationPresent(Id.class);
				Column columnAnnotation = null;				
					
				if(isAnnotationId && isAnnotationColumn){
					columnAnnotation = (Column)field.getAnnotation(Column.class);
					whereDeleteCondition.put(columnAnnotation.name(), field.get(this).toString());
				}
				System.out.println("Column :" + isAnnotationColumn);
				
			} catch (Throwable ex) {
				System.err.println(ex);
			}			
		}
		dba.delete(tableName, whereDeleteCondition);
		
	}
	
	
	public void print()
	{
		System.out.println(name);
	}

	

}
