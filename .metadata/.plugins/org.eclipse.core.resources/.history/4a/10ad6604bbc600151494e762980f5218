package OpenEJA.ORM;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;

import OpenEJA.Annotation.AutoGenerated;
import OpenEJA.Annotation.Column;
import OpenEJA.Annotation.Id;
import OpenEJA.Annotation.Table;
import OpenEJA.DAL.DBAdapter;
import OpenEJA.DAL.DBFactoryAdapter;

public abstract class Entity implements IEntity {
	
	private final String name;	
	private final DBAdapter dba;

	
	public Entity(String name){
		this.name = name;
		this.dba = DBFactoryAdapter.getDBAdapter();		
	}
	@Override
	public void add(){
			
		Class<?> entityClass = this.getClass();
		Annotation tableAnnotation = entityClass.getAnnotation(Table.class);
		String tableName;
		try {
			tableName = (String)tableAnnotation.annotationType().getMethod("name").invoke(tableAnnotation);
		} catch (IllegalAccessException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (IllegalArgumentException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (InvocationTargetException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (NoSuchMethodException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (SecurityException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		System.out.println("Table Name : " + tableName);
		Field[] fields = entityClass.getFields();
		
		boolean isAnnotationId;
		boolean isAnnotationAutoGenerated;
		boolean isAnnotationColumn;
		
		HashMap<String, String> newData = new HashMap<String, String>();
		
		for(Field field : fields){
			try {
				System.out.println(field.getName() + ":" + field.get(this));
				isAnnotationId = field.isAnnotationPresent(Id.class);
				isAnnotationAutoGenerated = field.isAnnotationPresent(AutoGenerated.class);
				isAnnotationColumn = field.isAnnotationPresent(Column.class);
				//newData.put(key, value)
				System.out.println("ID :" + isAnnotationId + ", AutoGenerated :" + isAnnotationAutoGenerated + ", Column :" + isAnnotationColumn);
				
			} catch (IllegalArgumentException e) {			
				e.printStackTrace();
			} catch (IllegalAccessException e) {			
				e.printStackTrace();
			}
			
		}
	
	}
	
	@Override
	public void remove(){
		//parse the annotation and add	
			
		
	}
	
	@Override
	public void update(){
		//parse the annotation and add	
		
	}
	public void print()
	{
		System.out.println(name);
	}

	

}
