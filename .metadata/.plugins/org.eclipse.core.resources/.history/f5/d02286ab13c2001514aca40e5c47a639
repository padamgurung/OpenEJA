package OpenEJA.DAL;

import java.sql.*;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;

public abstract class DBAdapter implements IDBAdapter {

	String dbUrl = "jdbc:mysql://localhost:3306/javadb";
	String user = "javadb";
	String pass = "Password123";

	Connection myConn;
	Statement myStmt;

	@Override
	public void connect() {
		try {

			myConn = DriverManager.getConnection(dbUrl, user, pass);

		} catch (SQLException e) {

			e.printStackTrace();
		}

	}

	@Override
	public void insert(String table, HashMap<?, ?> newData) {
		try {
			StringBuffer fieldNames = new StringBuffer();
			StringBuffer fieldValues = new StringBuffer();
			Iterator<?> iterator = newData.entrySet().iterator();
			while (iterator.hasNext()) {
				Entry<?, ?> entry = (Entry<?, ?>) iterator.next();
				fieldNames.append(entry.getKey());
				fieldValues.append("'").append(entry.getValue()).append("'");
				if (iterator.hasNext()) {
					fieldNames.append(",");
					fieldValues.append(",");
				}
			}
			StringBuilder sql = new StringBuilder();
			sql.append("INSERT INTO ").append(table).append("( ").append(fieldNames.toString()).append(" )");
			sql.append("VALUES (").append(fieldValues.toString()).append(" )");
			System.out.println(sql.toString());
			myStmt = myConn.createStatement();

			myStmt.executeUpdate(sql.toString());
		} catch (SQLException e) {

			e.printStackTrace();
		}

	}

	@Override
	public void update(String table, HashMap<?, ?> modifiedData, HashMap<?, ?> whereCondition) {
		try {
			StringBuffer fieldDetails = new StringBuffer();
			Iterator<?> dataIterator = modifiedData.entrySet().iterator();
			while (dataIterator.hasNext()) {
				Entry<?, ?> entry = (Entry<?, ?>) dataIterator.next();
				fieldDetails.append(entry.getKey()).append("=").append("'").append(entry.getValue()).append("'");

				if (dataIterator.hasNext()) {
					fieldDetails.append(",");

				}
			}
			StringBuffer whereDetails = new StringBuffer();
			Iterator<?> whereIterator = whereCondition.entrySet().iterator();
			while (whereIterator.hasNext()) {
				Entry<?, ?> entry = (Entry<?, ?>) whereIterator.next();
				whereDetails.append(entry.getKey()).append("=").append("'").append(entry.getValue()).append("'");

				if (whereIterator.hasNext()) {
					whereDetails.append(",");

				}
			}
			StringBuilder sql = new StringBuilder();
			sql.append("UPDATE ").append(table).append(" SET ").append(fieldDetails.toString());
			sql.append(" WHERE ").append(whereDetails.toString());

			System.out.println(sql.toString());
			myStmt = myConn.createStatement();
			myStmt.executeUpdate(sql.toString());
		} catch (SQLException e) {

			e.printStackTrace();
		}

	}

	@Override
	public void delete(String table, HashMap<?, ?> whereCondition) {
		try {
			
			StringBuffer whereDetails = new StringBuffer();
			Iterator<?> whereIterator = whereCondition.entrySet().iterator();
			while (whereIterator.hasNext()) {
				Entry<?, ?> entry = (Entry<?, ?>) whereIterator.next();
				whereDetails.append(entry.getKey()).append("=").append("'").append(entry.getValue()).append("'");

				if (whereIterator.hasNext()) {
					whereDetails.append(",");

				}
			}
			StringBuilder sql = new StringBuilder();
			sql.append("DELETE FROM ").append(table);
			sql.append(" WHERE ").append(whereDetails.toString());

			System.out.println(sql.toString());
			myStmt = myConn.createStatement();
			myStmt.executeUpdate(sql.toString());
		} catch (SQLException e) {

			e.printStackTrace();
		}
	}

	@Override
	public void retrieve(String table, HashMap<?, ?> whereCondition, String columns, String order, int offset, int limit) {
		try {
			myStmt = myConn.createStatement();
			ResultSet myRs = myStmt.executeQuery("select * from user");
			while (myRs.next()) {
				System.out.println(myRs.getString("id") + ", " + myRs.getString("name") + ", "
						+ myRs.getString("email") + ", " + myRs.getString("mobileNumber"));
			}
		} catch (SQLException e) {

			e.printStackTrace();
		}

	}

}
