package OpenEJA.ORM;



import java.lang.reflect.Field;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.HashMap;


import OpenEJA.Annotation.AutoGenerated;
import OpenEJA.Annotation.Column;
import OpenEJA.Annotation.Id;
import OpenEJA.Annotation.Table;
import OpenEJA.DAL.DBAdapter;
import OpenEJA.DAL.DBFactoryAdapter;

public abstract class Entity implements IEntity {
	
	private final String name;	
	private final DBAdapter dba;

	
	public Entity(String name){
		this.name = name;
		this.dba = DBFactoryAdapter.getDBAdapter();		
	}
	
	@Override
	public void load() {
		Class<?> entityClass = this.getClass();
		Table tableAnnotation = (Table)entityClass.getAnnotation(Table.class);
		String tableName = "";
		tableName = tableAnnotation.name();		
	
		Field[] fields = entityClass.getFields();
	
		boolean isAnnotationId;		
		boolean isAnnotationColumn;
	
		HashMap<String, String> loadCondition = new HashMap<String, String>();
		HashMap<String, String> values = new HashMap<String, String>();
		
		for(Field field : fields){
			try {
				
				isAnnotationColumn = field.isAnnotationPresent(Column.class);
				isAnnotationId = field.isAnnotationPresent(Id.class);
				if(!isAnnotationColumn)
					continue;
				Column columnAnnotation = (Column)field.getAnnotation(Column.class);				
					
				if(isAnnotationId){					
					loadCondition.put(columnAnnotation.name(), field.get(this).toString());
				}		
				
			} 
			catch (Throwable ex) {
				System.err.println(ex);
			}			
		}
		
		ResultSet rs = dba.retrieve(tableName, loadCondition);
		
		try {
			if(rs.next()){
				ResultSetMetaData rsmd = rs.getMetaData();
				int columnCount = rsmd.getColumnCount();
				for(int i = 1; i <= columnCount; i++){
					System.out.println(rsmd.getColumnName(i) + ":" + rs.getObject(i).toString());					
					values.put(rsmd.getColumnName(i), rs.getObject(i).toString());
				}
				System.out.println("________________________________________________");
			}
		} 
		catch (SQLException e) {			
			e.printStackTrace();
		}
		
		for(Field field : fields){			
				try {
					System.out.println("Before");
					System.out.println(field.getName() + " -- " + field.getType() + " -- " + field.get(this).toString());
					
					System.out.println("After");
					
					Column columnAnnotation = null;						
					columnAnnotation = (Column)field.getAnnotation(Column.class);	
					Object value = values.get(columnAnnotation.name());
					field.set(this, value);				
					//field.set(this,(Object)"1234");
					//System.out.println(field.getName() + " -- " + field.getType() + " -- " + field.get(this).toString());
				
						
					
				} catch (IllegalArgumentException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
		}	
	}
	
	@Override
	public void add(){
			
		Class<?> entityClass = this.getClass();
		Table tableAnnotation = (Table)entityClass.getAnnotation(Table.class);
		String tableName = "";
		tableName = tableAnnotation.name();		
		System.out.println("Table Name : " + tableName);
		Field[] fields = entityClass.getFields();	
		boolean isAnnotationColumn;
		boolean isAnnotationAutoGenerated;
		
		HashMap<String, String> newData = new HashMap<String, String>();
		
		for(Field field : fields){
			try {
				System.out.println(field.getName() + ":" + field.get(this).toString());
		
				isAnnotationColumn = field.isAnnotationPresent(Column.class);
				isAnnotationAutoGenerated = field.isAnnotationPresent(AutoGenerated.class);
				
				if(isAnnotationColumn && !isAnnotationAutoGenerated){
					Column columnAnnotation = (Column)field.getAnnotation(Column.class);
					newData.put(columnAnnotation.name(), field.get(this).toString());
				}				
				System.out.println("Column :" + isAnnotationColumn);
				
			} catch (Throwable ex) {
				System.err.println(ex);
			}			
		}
		dba.insert(tableName, newData);
	}
	
	@Override
	public void update(){
		Class<?> entityClass = this.getClass();
		Table tableAnnotation = (Table)entityClass.getAnnotation(Table.class);
		String tableName = "";
		tableName = tableAnnotation.name();		
		System.out.println("Table Name : " + tableName);
		Field[] fields = entityClass.getFields();
		
		boolean isAnnotationColumn;
		boolean isAnnotationId;
		
		HashMap<String, String> modifiedData = new HashMap<String, String>();
		HashMap<String, String> whereModifiedCondition = new HashMap<String, String>();
		
		for(Field field : fields){
			try {
				System.out.println(field.getName() + ":" + field.get(this).toString());
		
				isAnnotationColumn = field.isAnnotationPresent(Column.class);
				isAnnotationId = field.isAnnotationPresent(Id.class);
				Column columnAnnotation = null;
				
				if(isAnnotationColumn && !isAnnotationId){
					columnAnnotation = (Column)field.getAnnotation(Column.class);
					modifiedData.put(columnAnnotation.name(), field.get(this).toString());
				}		
				if(isAnnotationId){
					columnAnnotation = (Column)field.getAnnotation(Column.class);
					whereModifiedCondition.put(columnAnnotation.name(), field.get(this).toString());
				}
				System.out.println("Column :" + isAnnotationColumn);
				
			} catch (Throwable ex) {
				System.err.println(ex);
			}			
		}
		dba.update(tableName, modifiedData, whereModifiedCondition);
		
	}
	
	@Override
	public void remove(){
		Class<?> entityClass = this.getClass();
		Table tableAnnotation = (Table)entityClass.getAnnotation(Table.class);
		String tableName = "";
		tableName = tableAnnotation.name();		
		System.out.println("Table Name : " + tableName);
		Field[] fields = entityClass.getFields();
		
		boolean isAnnotationColumn;
		boolean isAnnotationId;		
	
		HashMap<String, String> whereDeleteCondition = new HashMap<String, String>();
		
		for(Field field : fields){
			try {
				System.out.println(field.getName() + ":" + field.get(this).toString());
		
				isAnnotationColumn = field.isAnnotationPresent(Column.class);
				isAnnotationId = field.isAnnotationPresent(Id.class);
				Column columnAnnotation = null;				
					
				if(isAnnotationId && isAnnotationColumn){
					columnAnnotation = (Column)field.getAnnotation(Column.class);
					whereDeleteCondition.put(columnAnnotation.name(), field.get(this).toString());
				}
				System.out.println("Column :" + isAnnotationColumn);
				
			} catch (Throwable ex) {
				System.err.println(ex);
			}			
		}
		dba.delete(tableName, whereDeleteCondition);
		
	}
	
	
	public void print()
	{
		System.out.println(name);
	}

	

}
