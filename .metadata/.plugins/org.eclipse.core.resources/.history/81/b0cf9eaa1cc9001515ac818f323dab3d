package openeja.generate;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.Date;

import openeja.dal.*;
import openeja.utils.Convert;


public class EntityGenerator {

	private List<EntityDetail> entityDetailList;
	private List<ReferenceEntityDetail> referencedEntityList;
	private DBAdapter dba;
	private String tableName;
	private String databaseName;

	public EntityGenerator() {
		this.entityDetailList = new LinkedList<EntityDetail>();
		this.referencedEntityList = new LinkedList<ReferenceEntityDetail>();
		this.dba = DBFactoryAdapter.getDBAdapter();
		this.tableName = "";
		this.databaseName = "";
	}

	public void generateEntity(String tableName, String databaseName) {
		this.tableName = tableName;
		this.databaseName = databaseName;
		ResultSet rs = this.dba.tableDetail(tableName, databaseName);
		this.prepareEntityList(rs);
		this.prepareReferencedEntityList();
		String code = this.classGenerationProcess();
		this.createClassFile(code);
		this.resetVariables();
	}

	public void generateAllEntities(String databaseName) {
		this.databaseName = databaseName;
		ResultSet tablesResultSet = this.dba.listTables(databaseName);
		try {
			while(tablesResultSet.next()){
				this.tableName = tablesResultSet.getString("table_name");
				this.generateEntity(this.tableName, this.databaseName);
			}
		} catch (SQLException e) {		
			e.printStackTrace();
		}
	}

	private void prepareEntityList(ResultSet rs) {
		try {
			while (rs.next()) {
				EntityDetail entityDetail = new EntityDetail();
				entityDetail.setColumnName(rs.getString("column_name"));
				entityDetail.setColumnDefault(rs.getString("column_default"));
				if (rs.getString("is_nullable").equalsIgnoreCase("YES"))
					entityDetail.setNullable(true);
				else
					entityDetail.setNullable(false);
				entityDetail.setDataType(rs.getString("data_type"));
				entityDetail.setCharMaxLength(rs.getString("character_maximum_length"));
				entityDetail.setColumnKey(rs.getString("column_key"));
				entityDetail.setExtra(rs.getString("extra"));
				this.entityDetailList.add(entityDetail);

			}
			for (EntityDetail ed : entityDetailList) {
				System.out.println(ed.getColumnName() + ":" + ed.getColumnDefault() + ":" + ed.isNullable() + ":"
						+ ed.getDataType() + ":" + ed.getCharMaxLength() + ":" + ed.getColumnKey() + ":"
						+ ed.getExtra());
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

	}
	private void prepareReferencedEntityList() {
		ResultSet res = this.dba.referencedTableDetail(tableName, databaseName);
		try {
			while (res.next()) {				
				ReferenceEntityDetail re = new ReferenceEntityDetail();
				re.setTableName(res.getString("table_name"));
				re.setColumnName(res.getString("column_name"));
				re.setReferencedTableName(res.getString("referenced_table_name"));
				re.setReferencedColumnName(res.getString("referenced_column_name"));
				this.referencedEntityList.add(re);				
			}
			for (ReferenceEntityDetail red : referencedEntityList) {
				System.out.println("Reference Info:::"+red.getTableName() + ":" + red.getColumnName()+":"+red.getReferencedTableName()+":"+red.getReferencedColumnName());
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	private String classGenerationProcess() {

		StringBuilder code = new StringBuilder();
		code.append("package openeja.bo.").append(databaseName.toLowerCase() + ";");
		code.append(System.lineSeparator());
		code.append(System.lineSeparator());	
		code.append("import openeja.annotation.*;");
		code.append(System.lineSeparator());
		code.append("import openeja.orm.Entity;");
		code.append(System.lineSeparator());
		code.append(System.lineSeparator());
		code.append("@Table(name = '").append(tableName).append("')");
		code.append(System.lineSeparator());
		code.append("public class ").append(Convert.toUpperCamelCase(tableName)).append(" extends Entity {")
				.append(System.lineSeparator());
		code.append(System.lineSeparator());
		for (EntityDetail ed : entityDetailList) {
			if (ed.getColumnKey().equalsIgnoreCase("PRI"))
				code.append("\t" + "@Id" + System.lineSeparator());
			if (ed.getExtra().equalsIgnoreCase("auto_increment"))
				code.append("\t" + "@AutoGenerated" + System.lineSeparator());
			if (ed.getColumnKey().equalsIgnoreCase("MUL"))
				code.append("\t" + "@ManyToOne" + System.lineSeparator());
			code.append("\t" + "@Column(name = '").append(ed.getColumnName()).append("'");
			code.append(", type = '").append(ed.getDataType()).append("'");
			if (ed.getCharMaxLength() != null)
				code.append(", length = '").append(ed.getCharMaxLength()).append("'");
			code.append(")").append(System.lineSeparator());

			String columnName = Convert.toLowerCamelCase(ed.getColumnName());
			if (ed.getDataType().equalsIgnoreCase("int"))
				code.append("\tprivate "+ ed.getDataType() + " " + columnName + ";")
						.append(System.lineSeparator() + System.lineSeparator());
			if (ed.getDataType().equalsIgnoreCase("varchar") || ed.getDataType().equalsIgnoreCase("text"))
				code.append("\tprivate String " + columnName + ";")
						.append(System.lineSeparator() + System.lineSeparator());
			if (ed.getDataType().equalsIgnoreCase("datetime") || ed.getDataType().equalsIgnoreCase("date"))
				code.append("\tprivate String " + columnName + ";")
						.append(System.lineSeparator() + System.lineSeparator());
			if (ed.getDataType().equalsIgnoreCase("double") || ed.getDataType().equalsIgnoreCase("float"))
				code.append("\tprivate " + ed.getDataType() + " " + columnName + ";")
						.append(System.lineSeparator() + System.lineSeparator());

		}
		for(ReferenceEntityDetail red : referencedEntityList){
			code.append("\t" + "@ManyToOne" + System.lineSeparator());
			code.append("\tpublic " + Convert.toUpperCamelCase(red.getReferencedTableName())+" "+Convert.toLowerCamelCase(red.getReferencedTableName()+";"+System.lineSeparator()));
			code.append(System.lineSeparator() + System.lineSeparator());
		}
		code.append("\tpublic ").append(Convert.toUpperCamelCase(tableName)).append("(){");
		code.append(System.lineSeparator());
		DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
		Date date = new java.util.Date();
		for (EntityDetail ed : entityDetailList) {
			String columnName = Convert.toLowerCamelCase(ed.getColumnName());
			if (ed.getDataType().equalsIgnoreCase("int"))
				code.append("\t\tthis.").append(columnName).append(" = 0;").append(System.lineSeparator());
			if (ed.getDataType().equalsIgnoreCase("varchar") || ed.getDataType().equalsIgnoreCase("text"))
				code.append("\t\tthis.").append(columnName).append(" = '';").append(System.lineSeparator());
			if (ed.getDataType().equalsIgnoreCase("datetime") || ed.getDataType().equalsIgnoreCase("date"))
				code.append("\t\tthis.").append(columnName).append(" = '").append(dateFormat.format(date)).append("';")
						.append(System.lineSeparator());
			if (ed.getDataType().equalsIgnoreCase("double") || ed.getDataType().equalsIgnoreCase("float"))
				code.append("\t\tthis.").append(columnName).append(" = 0.0;").append(System.lineSeparator());
		}
		for(ReferenceEntityDetail red : referencedEntityList){
			code.append("\t\tthis.").append(Convert.toLowerCamelCase(red.getReferencedTableName())).append(" = new "+Convert.toUpperCamelCase(red.getReferencedTableName())).append(System.lineSeparator());
		}
		code.append(System.lineSeparator()).append("\t}");
		code.append(System.lineSeparator());

		for (EntityDetail ed : entityDetailList) {
			String columnName = Convert.toLowerCamelCase(ed.getColumnName());
			if (ed.getDataType().equalsIgnoreCase("int")){
				code.append("\tpublic void set").append(Convert.toUpperCamelCase(ed.getColumnName()));
				code.append("(").append(ed.getDataType()).append(" "+columnName+"){").append(System.lineSeparator());
				code.append("\t\tthis.").append(columnName).append(" = "+columnName+";").append(System.lineSeparator());
				code.append("\t}").append(System.lineSeparator());
				
				code.append("\tpublic ").append(ed.getDataType()).append(" get").append(Convert.toUpperCamelCase(ed.getColumnName()));
				code.append("(){").append(System.lineSeparator());
				code.append("\t\treturn ").append(columnName).append(";").append(System.lineSeparator());
				code.append("\t}").append(System.lineSeparator());
			}			
			if (ed.getDataType().equalsIgnoreCase("varchar") || ed.getDataType().equalsIgnoreCase("text")){
				code.append("\tpublic void set").append(Convert.toUpperCamelCase(ed.getColumnName()));
				code.append("(").append("String").append(" "+columnName+"){").append(System.lineSeparator());
				code.append("\t\tthis.").append(columnName).append(" = "+columnName+";").append(System.lineSeparator());
				code.append("\t}").append(System.lineSeparator());
				
				code.append("\tpublic ").append("String").append(" get").append(Convert.toUpperCamelCase(ed.getColumnName()));
				code.append("(){").append(System.lineSeparator());
				code.append("\t\treturn ").append(columnName).append(";").append(System.lineSeparator());
				code.append("\t}").append(System.lineSeparator());
			}			
			if (ed.getDataType().equalsIgnoreCase("datetime") || ed.getDataType().equalsIgnoreCase("date")){
				code.append("\tpublic void set").append(Convert.toUpperCamelCase(ed.getColumnName()));
				code.append("(").append("String").append(" "+columnName+"){").append(System.lineSeparator());
				code.append("\t\tthis.").append(columnName).append(" = "+columnName+";").append(System.lineSeparator());
				code.append("\t}").append(System.lineSeparator());
				
				code.append("\tpublic ").append("String").append(" get").append(Convert.toUpperCamelCase(ed.getColumnName()));
				code.append("(){").append(System.lineSeparator());
				code.append("\t\treturn ").append(columnName).append(";").append(System.lineSeparator());
				code.append("\t}").append(System.lineSeparator());
			}			
			if (ed.getDataType().equalsIgnoreCase("double") || ed.getDataType().equalsIgnoreCase("float")){
				code.append("\tpublic void set").append(Convert.toUpperCamelCase(ed.getColumnName()));
				code.append("(").append(ed.getDataType()).append(" "+columnName+"){").append(System.lineSeparator());
				code.append("\t\tthis.").append(columnName).append(" = "+columnName+";").append(System.lineSeparator());
				code.append("\t}").append(System.lineSeparator());
				
				code.append("\tpublic ").append(ed.getDataType()).append(" get").append(Convert.toUpperCamelCase(ed.getColumnName()));
				code.append("(){").append(System.lineSeparator());
				code.append("\t\treturn ").append(columnName).append(";").append(System.lineSeparator());
				code.append("\t}").append(System.lineSeparator());
			}
		
		}
		
		code.append("}").append(System.lineSeparator());	
		return code.toString().replaceAll("'", "\"");

	}

	private void createClassFile(String code) {
		File dir = new File("../bo/src/openeja/bo/" + this.databaseName.toLowerCase());
		if (!dir.exists())
			dir.mkdirs();
		File file = new File("../bo/src/openeja/bo/" + this.databaseName.toLowerCase() + "/"
				+ Convert.toUpperCamelCase(this.tableName) + ".java");
		if (!file.exists()) {
			try {
				file.createNewFile();

			} catch (IOException e) {
				e.printStackTrace();
			}			
		}
		try {
			FileOutputStream fop = new FileOutputStream(file);
			try {
				fop.write(code.getBytes());
				fop.flush();
				fop.close();
			} catch (IOException e) {				
				e.printStackTrace();
			}
		} catch (FileNotFoundException e) {
		
			e.printStackTrace();
		}

	}

	private void resetVariables() {
		this.entityDetailList.clear();
		this.referencedEntityList.clear();
	}
}
